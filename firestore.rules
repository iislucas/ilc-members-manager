rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /members/{memberEmail} {
      function isOwner() {
        return request.auth.token.email == memberEmail;
      }
      function isAdmin() {
        return get(/databases/$(database)/documents/members/$(request.auth.token.email)).data.isAdmin == true;
      }
      function isSchoolManager() {
        let userMember = get(/databases/$(database)/documents/members/$(request.auth.token.email)).data;
        let member = get(/databases/$(database)/documents/members/$(memberEmail)).data;
        let school = get(/databases/$(database)/documents/schools/$(member.managingOrgId)).data;
        return userMember.instructorId == school.owner || userMember.instructorId in school.managers;
      }
      function isValidEdit() {
        return request.resource.data.lastUpdated == request.time;
      }
      allow read: if isOwner() || isAdmin() || isSchoolManager();
      allow write: if isValidEdit() && (isAdmin() || isSchoolManager());
      allow update: if isValidEdit() && isOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastUpdated', 'name', 'instructorWebsite', 'publicRegionOrCity', 'publicEmail', 'publicPhone', 'address', 'zipCode', 'country', 'phone', 'email', 'gender', 'dateOfBirth', 'sifuMemberId']);
    }

    match /schools/{schoolId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/members/$(request.auth.token.email)).data.isAdmin == true;
      }
      function isSchoolManager() {
        let member = get(/databases/$(database)/documents/members/$(request.auth.token.email)).data;
        let school = get(/databases/$(database)/documents/schools/$(schoolId)).data;
        return member.instructorId == school.owner || member.instructorId in school.managers;
      }
      function isValidEdit() {
        return request.resource.data.lastUpdated == request.time;
      }
      allow read: if true;
      allow write: if isValidEdit() && isAdmin();
      allow update: if isValidEdit() && isSchoolManager() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastUpdated', 'schoolAddress', 'schoolZipCode', 'schoolWebsite', 'managers']);
    }

    match /instructorsPublic/{instructorId} {
      allow read: if true;
    }

    match /schools/{schoolId}/members/{memberId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/members/$(request.auth.token.email)).data.isAdmin == true;
      }
      function isSchoolManager() {
        let member = get(/databases/$(database)/documents/members/$(request.auth.token.email)).data;
        let school = get(/databases/$(database)/documents/schools/$(schoolId)).data;
        return member.instructorId == school.owner || member.instructorId in school.managers;
      }
      allow read: if isAdmin() || isSchoolManager();
    }

    match /static/country-codes {
      function isAdmin() {
        return get(/databases/$(database)/documents/members/$(request.auth.token.email)).data.isAdmin == true;
      }
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /counters/singleton {
      function isAdmin() {
        return get(/databases/$(database)/documents/members/$(request.auth.token.email)).data.isAdmin == true;
      }
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}